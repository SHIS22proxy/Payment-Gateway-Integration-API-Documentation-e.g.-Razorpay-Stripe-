{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Payment Gateway Integration API Documentation (e.g., Razorpay, Stripe)","text":""},{"location":"#1-introduction","title":"1. Introduction","text":""},{"location":"#overview","title":"Overview","text":"<p>The Payment Gateway Integration API allows your application to connect with external payment providers like Stripe or Razorpay to securely handle transactions, process customer payments, and manage payment-related events such as refunds, verifications, and webhook notifications.</p>"},{"location":"#why-it-matters","title":"Why It Matters","text":"<p>Secure and seamless payment processing is critical for any digital commerce system. A robust integration ensures smooth customer experience, reduces payment failures, and complies with security and regulatory standards (e.g., PCI DSS).</p>"},{"location":"#who-this-guide-is-for","title":"Who This Guide is For","text":"<ul> <li>Backend developers integrating payment flows  </li> <li>Frontend developers implementing checkout interfaces  </li> <li>Security engineers validating PCI compliance  </li> <li>Product teams enabling subscription or one-time payments  </li> <li>Finance/operations staff managing refunds and reconciliation</li> </ul>"},{"location":"#2-key-terminology","title":"2. Key Terminology","text":"<ul> <li>Payment Intent: (Stripe) An object representing the lifecycle of a payment  </li> <li>Order ID: A unique reference to the order being paid for  </li> <li>Checkout Session: A hosted payment page session (Stripe/Razorpay Checkout)  </li> <li>Webhook: An HTTP callback sent by the gateway to notify of payment events  </li> <li>Capture: The process of finalizing a previously authorized payment  </li> <li>Refund: Returning the amount to the customer post-purchase  </li> <li>Tokenization: Encrypting payment info for secure, one-time or repeat use  </li> <li>PCI DSS: Payment Card Industry Data Security Standard for compliance  </li> </ul>"},{"location":"#3-technical-overview","title":"3. Technical Overview","text":""},{"location":"#architecture-flow","title":"Architecture Flow","text":"<p>Your backend acts as a secure intermediary between the frontend and the payment gateway. It creates the transaction, verifies the status via webhooks, and updates your order system accordingly.</p> <p></p>"},{"location":"#supported-gateways","title":"Supported Gateways","text":"<ul> <li>Stripe: Global gateway with support for cards, wallets, and bank debits  </li> <li>Razorpay: Popular in India; supports UPI, cards, wallets, and EMI  </li> </ul>"},{"location":"#backend-tools","title":"Backend Tools","text":"<ul> <li>Stripe SDKs </li> <li>Razorpay SDKs </li> <li>Node.js / Django / Spring Boot for backend logic  </li> <li>HTTPS &amp; SSL for all webhook endpoints  </li> </ul>"},{"location":"#4-step-by-step-guide-or-workflow","title":"4. Step-by-Step Guide or Workflow","text":""},{"location":"#41-create-a-checkout-session-backend","title":"4.1 Create a Checkout Session (Backend)","text":"<p>Stripe Example</p> <p>Endpoint: <code>POST /api/payments/stripe/checkout</code></p> <p>Node.js Code Example:</p> <pre><code>js\nconst stripe = require('stripe')('sk_test_...');\nconst session = await stripe.checkout.sessions.create({\n  payment_method_types: ['card'],\n  line_items: [{\n    price_data: {\n      currency: 'usd',\n      product_data: {\n        name: 'Wireless Mouse',\n      },\n      unit_amount: 2500,\n    },\n    quantity: 1,\n  }],\n  mode: 'payment',\n  success_url: 'https://yourdomain.com/success',\n  cancel_url: 'https://yourdomain.com/cancel',\n});\n</code></pre>"},{"location":"#response","title":"Response:","text":"<pre><code>json\n{\n  \"checkout_url\": \"https://checkout.stripe.com/pay/cs_test_...\"\n}\n</code></pre>"},{"location":"#42-handle-webhooks","title":"4.2 Handle Webhooks","text":""},{"location":"#endpoint","title":"Endpoint:","text":"<pre><code>POST /api/webhooks/stripe\n</code></pre>"},{"location":"#example-payload","title":"Example Payload:","text":"<pre><code>json\n{\n  \"type\": \"checkout.session.completed\",\n  \"data\": {\n    \"object\": {\n      \"payment_intent\": \"pi_123\",\n      \"customer_email\": \"user@example.com\"\n    }\n  }\n}\n</code></pre>"},{"location":"#action","title":"Action:","text":""},{"location":"#update-order-status-in-your-database-to-paid","title":"Update order status in your database to paid.","text":""},{"location":"#43-verify-payment-optional-manual-check","title":"4.3 Verify Payment (Optional Manual Check)","text":""},{"location":"#endpoint_1","title":"Endpoint:","text":"<pre><code>GET /api/payments/stripe/status/:payment_intent_id\n</code></pre>"},{"location":"#44-issue-a-refund-backend","title":"4.4 Issue a Refund (Backend)","text":"<pre><code>js\nconst refund = await stripe.refunds.create({\n  payment_intent: 'pi_123',\n});\n</code></pre>"},{"location":"#45-razorpay-example-payment-capture","title":"4.5 Razorpay Example (Payment Capture)","text":"<pre><code>js\nconst razorpay = new Razorpay({ key_id: 'rzp_test...', key_secret: '...' });\n\nconst order = await razorpay.orders.create({\n  amount: 50000, // in paise\n  currency: \"INR\",\n  receipt: \"order_rcptid_11\",\n  payment_capture: 1\n});\n</code></pre>"},{"location":"#frontend-integration","title":"Frontend Integration:","text":"<pre><code>html\n&lt;script src=\"https://checkout.razorpay.com/v1/checkout.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"#5-best-practices","title":"5. Best Practices","text":"<p>Use HTTPS Everywhere \u2014 especially for webhooks and callbacks</p> <p>Never Handle Card Details Directly \u2014 use the gateway\u2019s secure UI or SDK</p> <p>Store Transaction IDs for auditing and reconciliation</p> <p>Validate Webhooks with Signature Secret to prevent spoofing</p> <p>Use Idempotent Requests to avoid duplicate charges on retries</p> <p>Separate Sandbox and Production Keys</p> <p>Notify Users Post-Payment \u2014 send confirmation emails or receipts</p>"},{"location":"#6-common-issues-troubleshooting","title":"6. Common Issues &amp; Troubleshooting","text":"Issue Description Resolution 400 Bad Request Invalid parameters    Double-check the request structure 402 Payment Required Card declined Inform user and retry 403 Forbidden Using test keys in prod   Replace with live credentials 409 Conflict Payment already captured Use idempotency keys Signature Mismatch Webhook spoofing attempt  Verify webhook with signature secret"},{"location":"#7-references","title":"7. References","text":"<p>Stripe API Docs</p> <p>Razorpay Integration Docs</p> <p>PCI Compliance Guide</p> <p>OAuth 2.0 for Secure Auth</p> <p>Handling Webhooks Securely</p>"},{"location":"#8-appendix","title":"8. Appendix","text":""},{"location":"#81-sample-webhook-verification-stripe-nodejs","title":"8.1 Sample Webhook Verification (Stripe, Node.js)","text":"<pre><code>js\nconst endpointSecret = \"whsec_...\";\nconst sig = req.headers['stripe-signature'];\n\nlet event;\ntry {\n  event = stripe.webhooks.constructEvent(req.body, sig, endpointSecret);\n} catch (err) {\n  return res.status(400).send(`Webhook Error: ${err.message}`);\n}\n</code></pre>"},{"location":"#82-mermaid-flow-razorpay-payment-process","title":"8.2 Mermaid Flow: Razorpay Payment Process","text":""},{"location":"#83-curl-example-stripe-checkout-session","title":"8.3 Curl Example: Stripe Checkout Session","text":"<pre><code>bash\ncurl -X POST https://api.yoursite.com/api/payments/stripe/checkout \\\n  -H \"Authorization: Bearer &lt;your_token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"order_id\": \"ORD123\",\n    \"amount\": 5000,\n    \"currency\": \"usd\"\n  }'\n</code></pre>"}]}